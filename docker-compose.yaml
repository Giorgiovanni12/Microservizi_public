version: '3'
services:

#app python utenti
  apputenti:
    container_name: apputenti
    restart: on-failure
    #posso usare il nome del container per la build direttamente da dockerhub
    image: giorgiova123/microservizi:UtentiApp
        #130secondi prima di avviare il programma
    command:  sh -c "sleep 130s ; python3 ./utenti.py"
    ports:
      - '5000:5000' #esposta la porta default di flask [5000]
    depends_on:
      - dbutenti  # prende come riferimento il dbutenti
    networks:
      - users #condividono la stessa rete
    
#db utenti mysql
  dbutenti:
    container_name: dbutenti
    image:  giorgiova123/microservizi:UtentiDb
    restart: on-failure #restart del container 
    environment:
      MYSQL_ROOT_PASSWORD: Giorgiovanni123! #variabili da utilizzare dentro il db
      MYSQL_DATABASE: Utenti
      MYSQL_USER: sa
      MYSQL_PASSWORD: Giorgiovanni123!   
    networks:
      - users

      #db libri
  dblibri:
    container_name: dblibri
    image: giorgiova123/microservizi:Dblibri 
    restart: on-failure 
    environment:
      MYSQL_ROOT_PASSWORD: Giorgiovanni123! 
      MYSQL_DATABASE: Libri
      MYSQL_USER: sa
      MYSQL_PASSWORD: Giorgiovanni123!  
    ports:
      -  '3305:3306'
    networks:
      - books

#python libri
  applibri:
    container_name: applibri
    image: giorgiova123/microservizi:Applibri 
    restart: on-failure
    command:  sh -c "sleep 120s ; python3 ./libri.py"   #120secondi prima di avviare il programma
    ports:
      - '4999:5000' #porta 4999 aperta verso l'esterno
    depends_on:
      - dblibri
      - kafka
      #- kafka #prende come riferimento il dbLibri  
    networks:
      - books  
    

     #db prstiti nosql 
  couchserver:
    image: couchdb
    restart: on-failure
    ports:
      - "5983:5984"
    environment:
      - COUCHDB_USER=admin
      - COUCHDB_PASSWORD=giovanni  #variabili che utilizza all'interno del db
    volumes:
        - ./dbdata:/opt/couchdb/data
    networks:
      - borrowings

#prestiti python
  appprestiti:
    build: /home/giorgio/ProvaMicroservizi/Microservizi/Prestiti
        #110secondi prima di avviare il programma
    command:  sh -c "sleep 110s ; python3 ./prestiti.py"
    restart: on-failure
    depends_on:
      - couchserver
    ports:
      - 4998:5000  #si espone alla porta 4998
    networks:
      - borrowings
    

  #creare kafka 
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    #configurazione con variabili 
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CONTROLLER://:9093,PLAINTEXT://:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093

    networks:
      - books

#build della applicazione consumer che dipende da kafka
  consumer-app:
    build: /home/giorgio/ProvaMicroservizi/Microservizi/Consumer
    container_name: consumer-app
    restart: always
    depends_on:
      - kafka
    networks:
      - books #Stessa network di libri e kafka 



#network divise per ogni coppia di microservizi
networks:
  users:
    driver: bridge
  books:
    driver: bridge
  borrowings:
    driver: bridge
